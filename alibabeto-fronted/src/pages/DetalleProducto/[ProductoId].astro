---
import NavBar from '../../components/NavBar.astro'
import Sugerencias from '../../components/Sugerencias.astro'
import Footer from "../../components/Footer.astro"
import { type Producto } from '../../types/Productos'
import { type BasicResponse } from '../../types/API'
import { API } from '../../api/index'

const { ProductoId } = Astro.params;

let filteredProduct: Producto | undefined = undefined; // Definir la variable para almacenar el producto filtrado

console.log(ProductoId);


// Realizar solicitud HTTP para obtener todos los productos
const response = await fetch(`${API.dataUrl}/producto/findone/${ProductoId}`);

const { data:responseData }: BasicResponse<Producto> = await response.json();

console.log(responseData);

if (!responseData) {
        console.log('No se encontró ningún producto con el ID especificado.');
        return Astro.redirect('/')
    }

    
    const response2 = await fetch(`${API.dataUrl}/producto/query?`, {
    method: 'GET'
});

const { data }: BasicResponse<Producto[]> = await response2.json();

// Supongamos que tienes una variable llamada categoriaFk que contiene la categoría a filtrar
const categoriaFk = responseData.CategoriaFK; // Aquí debes colocar el valor de la categoría que deseas filtrar

const productosFiltrados = data.filter(producto => producto.CategoriaFK === categoriaFk);

---

<NavBar/>
<main class="my-8">
        <div class="container mx-auto px-6">
            <div class="md:flex md:items-center">
                <div class="w-full h-64 md:w-1/2 lg:h-96">
                    <img class="h-full w-full rounded-md object-cover max-w-lg mx-auto" src={responseData.imagen} alt={responseData.descripcion}>
                </div>
                <div class="w-full max-w-lg mx-auto mt-5 md:ml-8 md:mt-0 md:w-1/2">
                     <h3 class="text-gray-700 uppercase text-lg">{responseData.descripcion}</h3> 
                     <span class="text-gray-500 mt-3">{responseData.precio}</span>
                    <hr class="my-3">
                    <div class="mt-2">
                        <label class="text-gray-700 text-sm" for="count">Cantidad:</label>
                        <div class="flex items-center mt-1">
                            <button id="decrementButton" class="text-gray-500 focus:outline-none focus:text-gray-600">
                                <svg class="h-5 w-5" fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" stroke="currentColor"><path d="M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                            </button>
                            <span id="counter" class="text-gray-700 text-lg mx-2">0</span>
                            <button id="incrementButton" class="text-gray-500 focus:outline-none focus:text-gray-600">
                                <svg class="h-5 w-5" fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" stroke="currentColor"><path d="M12 9v3m0 0v3m0-3h3m-3 0H9"></path></svg>
                            </button>
                        </div>
                        <label class="text-gray-700 text-sm opacity-50" for="count">Existencias:</label>
                        <label class="text-gray-700 text-sm opacity-50" for="count">{responseData.existencias}</label>

                    </div>
                    <div class="flex items-center mt-6">
                        <button class="px-8 py-2 bg-indigo-600 text-white text-sm font-medium rounded hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500">Order Now</button>
                        <button class="mx-2 text-gray-600 border rounded-md p-2 hover:bg-gray-200 focus:outline-none">
                            <svg class="h-5 w-5" fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" stroke="currentColor"><path d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path></svg>
                        </button>
                    </div>
                </div>
            </div>
            <div style="margin-bottom: 50px;"></div>
            <h3 class="text-gray-600 text-2xl font-medium">Algo mas que te podria interesar...</h3>

            <div class="grid gap-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 mt-6">
                {productosFiltrados.slice(0, 4).map((producto: Producto) => (
                    <div class="mb-4">
                        <Sugerencias {...producto} />
                    </div>
                ))}
            </div>
            

        </div>
    </main>
</div>

<script>
    // Obtener referencias a los elementos del DOM
const incrementButton = document.getElementById('incrementButton');
const decrementButton = document.getElementById('decrementButton');
const counter = document.getElementById('counter');

// Función para aumentar el contador
function incrementCounter() {
    counter.textContent = parseInt(counter.textContent) + 1;
}

// Función para disminuir el contador
function decrementCounter() {
    // Asegurarse de que el contador no sea menor que cero
    if (parseInt(counter.textContent) > 0) {
        counter.textContent = parseInt(counter.textContent) - 1;
    }
}

// Agregar event listeners a los botones
incrementButton.addEventListener('click', incrementCounter);
decrementButton.addEventListener('click', decrementCounter);

</script>
<Footer/>